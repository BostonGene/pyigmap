// Global default params, used in configs
params {
    fq1                        = null
    fq2                        = null
    sample_id                  = null
    help                       = false
    reads_to_process           = 'all'
    zenodo                     = false
    zenodo_link                = 'https://zenodo.org/records/11103555/files/'
    outdir                     = './results'
    mock_merge_amplicon        = false

    // CalibDedup params
    out_calib_dedup_fq1        = 'cR1.fastq.gz'
    out_calib_dedup_fq2        = 'cR2.fastq.gz'
    out_calib_dedup_json       = 'calib.json'
    kmer_size                  = 7
    minimizer_count            = 6
    minimizer_threshold        = 6
    error_tolerance            = 2
    fq1_barcode_pattern        = null
    fq2_barcode_pattern        = null

    // Fastp params
    out_fastp_fq1              = 'mR1.fastq.gz'
    out_fastp_fq2              = 'mR2.fastq.gz'
    out_fastp_fq12             = 'mR12.fastq.gz'
    out_fastp_json             = 'fastp.json'
    out_fastp_html             = 'fastp.html'
    out_stat_json              = 'stat.json'
    insert_size                = 1
    disable                    = "length_filtering adapter_trimming quality_filtering"

    // Vidjil params
    vidjil_ref                 = './steps/vidjil/vidjil.germline.tar.gz'
    out_vidjil_fasta           = 'vidjil.fasta.gz'
    out_vidjil_logs            = 'vidjil.log'

    // IgBlast params
    igblast_receptor           = 'all'
    igblast_organism           = 'human'
    all_alleles                = false
    out_igblast_annotation     = 'raw_annotation.tsv.gz'
    igblast_ref                = params.all_alleles ? './steps/igblast/igblast.reference.all_alleles.tar.gz' : \
                                                      './steps/igblast/igblast.reference.major_allele.tar.gz'

    // CDR3ErrorCorrector params
    filter_pgen_singletons     = 0
    filter_pgen_all            = null
    clonotype_collapse_factor  = 0.05
    olga_models                = './steps/cdr3nt_error_corrector/olga-models.tar.gz'
    out_corrected_annotation   = 'corrected_annotation.tsv'
    out_archive                = 'pyigmap.tar.gz'
    only_functional            = true
    only_canonical             = true
    remove_chimeras            = true
    discard_junctions_with_N   = true
    enabled_filters            = getFiltersList().join(" ")
}

def getFiltersList() {
    def filtersList = []

    if (params.remove_chimeras) {
        filtersList << "--remove-chimeras"
    }

    if (params.fq1_barcode_pattern == null && params.fq2_barcode_pattern == null) {
        filtersList << "--top-c-call --top-v-alignment-call"
    }

    if (params.discard_junctions_with_N) {
        filtersList << "--discard-junctions-with-N"
    }

    if (params.fq1_barcode_pattern != null || params.fq2_barcode_pattern != null) {
        filtersList << "--skip-pgen-calculation"
    } else if (params.filter_pgen_all != null) {
        filtersList << "--filter-pgen-all ${params.filter_pgen_all}"
    } else {
        filtersList << "--filter-pgen-singletons ${params.filter_pgen_singletons}"
    }

    return filtersList
}

process {
    withName:GetLinks {
        errorStrategy = 'retry'
        maxRetries = 3
        container = 'downloader-image'
    }
    withName:Download {
        errorStrategy = 'retry'
        maxRetries = 3
        container = 'downloader-image'
        publishDir = [
            path: "${params.outdir}/downloader",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName:Downsample {
        container = 'downloader-image'
        publishDir = [
            path: "${params.outdir}/downsample",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName:CalibDedup {
        container = 'calib_dedup-image'
        publishDir = [
            path: "${params.outdir}/calib_dedup",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName: 'FastpMerge|FastpMockMerge' {
        container = 'fastp-image'
        publishDir = [
            path: "${params.outdir}/fastp",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName:Vidjil {
        container = 'vidjil-image'
        publishDir = [
            path: "${params.outdir}/vidjil",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName: 'IgBlastFASTA|IgBlastFASTQ|IgBlastMockFASTQ' {
        container = 'igblast-image'
        publishDir = [
            path: "${params.outdir}/igblast",
            enabled: false,
            mode: 'copy'
        ]
    }
    withName:CDR3ErrorCorrector {
        container = 'cdr3nt_error_corrector-image'
        publishDir = [
            path: params.outdir,
            mode: 'copy'
        ]
    }
}

profiles {
    docker {
        docker.enabled = true
        docker.remove = true
        podman.enabled = false
        podman.remove = false
    }
    podman {
        docker.enabled = false
        docker.remove = false
        podman.enabled = true
        podman.remove = true
    }
}

manifest {
    name            = 'bostongene/pyigmap'
    defaultBranch   = 'main'
    homePage        = 'https://github.com/bostongene/pyigmap'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.10.1'
    doi             = '10.5281/zenodo.11103554'
}
